{
  "__inputs": [
    {
      "name": "DS_POSTGRESQL",
      "label": "PostgreSQL",
      "description": "",
      "type": "datasource",
      "pluginId": "postgres",
      "pluginName": "PostgreSQL"
    },
    {
      "name": "VAR_NETWORK",
      "type": "constant",
      "label": "network",
      "value": "RENAG",
      "description": ""
    }
  ],
  "__elements": {},
  "__requires": [
    {
      "type": "grafana",
      "id": "grafana",
      "name": "Grafana",
      "version": "9.5.2"
    },
    {
      "type": "panel",
      "id": "marcusolsson-dynamictext-panel",
      "name": "Dynamic Text",
      "version": "3.1.0"
    },
    {
      "type": "panel",
      "id": "nline-plotlyjs-panel",
      "name": "Plotly",
      "version": "1.3.0"
    },
    {
      "type": "datasource",
      "id": "postgres",
      "name": "PostgreSQL",
      "version": "1.0.0"
    },
    {
      "type": "panel",
      "id": "table",
      "name": "Table",
      "version": ""
    },
    {
      "type": "panel",
      "id": "text",
      "name": "Text",
      "version": ""
    }
  ],
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "grafana",
          "uid": "-- Grafana --"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": null,
  "links": [],
  "liveNow": false,
  "panels": [
    {
      "collapsed": false,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 0
      },
      "id": 5,
      "panels": [],
      "title": "Signal to noise",
      "type": "row"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "${DS_POSTGRESQL}"
      },
      "gridPos": {
        "h": 11,
        "w": 8,
        "x": 0,
        "y": 1
      },
      "id": 6,
      "options": {
        "config": {
          "displayModeBar": false
        },
        "data": "",
        "layout": {
          "margin": {
            "b": 40,
            "l": 20,
            "r": 20,
            "t": 5
          },
          "paper_bgcolor": "rgba(0,0,0,0)",
          "plot_bgcolor": "rgba(0,0,0,0)",
          "polar": {
            "angularaxis": {
              "direction": "clockwise",
              "rotation": 90,
              "type": "linear"
            },
            "radialaxis": {
              "angle": 0,
              "autorange": false,
              "range": [
                0,
                90
              ],
              "type": "linear"
            }
          },
          "showlegend": false,
          "xaxis": {
            "autorange": true,
            "range": [
              -1,
              6
            ],
            "showgrid": false,
            "visible": false
          },
          "yaxis": {
            "automargin": true,
            "autorange": true,
            "range": [
              -1,
              4
            ],
            "showgrid": false,
            "visible": false
          }
        },
        "onclick": "// console.log(data);\n// window.updateVariables({query:{'var-project':'test'}, partial: true})",
        "script": "if (data.series[0] == undefined) return {};\n\nlet r =             data.series[0].fields[0].values.buffer;\nlet theta =         data.series[0].fields[1].values.buffer;\nlet value =         data.series[0].fields[2].values.buffer;\nlet satellite =     data.series[0].fields[3].values.buffer;\nlet constellation = data.series[0].fields[4].values.buffer;\n\n// TODO ? une ligne de legende par sat avec une boucle for + du js\nlet trace1 = {\n  name: \"\",\n\n  type: 'scatterpolar',\n  mode: 'markers',\n  marker: {\n    color: value,\n    colorscale: \"Portland\",\n    reversescale: true,\n    showscale: true,\n    cmin: 10,\n    cmax: 60\n  },\n\n  hovertemplate: \"Value: %{marker.color}<br>\" +\n                 \"Satellite: %{text}<br>\" +\n                 \"Constellation: \" + constellation[0],\n\n  r: r,\n  theta: theta,\n  text: satellite\n};\n\n\nreturn {\n  data: [trace1]\n};\n",
        "yaml_mode": true
      },
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_POSTGRESQL}"
          },
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "select\r\n    90 - elevation as \"r\",\r\n    azimut as \"theta\",\r\n    sig2noise1 as \"value\",\r\n    'G' || to_char(satellite, 'fm00') as \"satellite\",\r\n    '$constellation' as \"constellation\"\r\nfrom\r\n    skyplot\r\n    inner join station s on s.id = skyplot.station_id\r\n    inner join constellation c on c.id = skyplot.constellation_id\r\n    inner join station_network sn on skyplot.station_id = sn.station_id\r\n    inner join network n on sn.network_id = n.id\r\n    inner join skyplot_date sd on date_id = sd.id\r\nwhere\r\n    s.fullname = '$station' and\r\n    c.fullname = '$constellation' and\r\n    sig2noise1 is not null and\r\n    n.name = '$network' and\r\n    sd.date = '$day';",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "SNR1 (dB-Hz) - $station - $constellation - $day",
      "transformations": [],
      "type": "nline-plotlyjs-panel"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "${DS_POSTGRESQL}"
      },
      "gridPos": {
        "h": 11,
        "w": 8,
        "x": 8,
        "y": 1
      },
      "id": 7,
      "options": {
        "config": {
          "displayModeBar": false
        },
        "data": "",
        "layout": {
          "margin": {
            "b": 40,
            "l": 20,
            "r": 20,
            "t": 5
          },
          "paper_bgcolor": "rgba(0,0,0,0)",
          "plot_bgcolor": "rgba(0,0,0,0)",
          "polar": {
            "angularaxis": {
              "direction": "clockwise",
              "rotation": 90,
              "type": "linear"
            },
            "radialaxis": {
              "angle": 0,
              "autorange": false,
              "range": [
                0,
                90
              ],
              "type": "linear"
            }
          },
          "showlegend": false,
          "xaxis": {
            "autorange": true,
            "range": [
              -1,
              6
            ],
            "showgrid": false,
            "visible": false
          },
          "yaxis": {
            "automargin": true,
            "autorange": true,
            "range": [
              -1,
              4
            ],
            "showgrid": false,
            "visible": false
          }
        },
        "onclick": "// console.log(data);\n// window.updateVariables({query:{'var-project':'test'}, partial: true})",
        "script": "if (data.series[0] == undefined) return {};\n\nlet r =             data.series[0].fields[0].values.buffer;\nlet theta =         data.series[0].fields[1].values.buffer;\nlet value =         data.series[0].fields[2].values.buffer;\nlet satellite =     data.series[0].fields[3].values.buffer;\nlet constellation = data.series[0].fields[4].values.buffer;\n\n// TODO ? une ligne de legende par sat avec une boucle for + du js\nlet trace1 = {\n  name: \"\",\n\n  type: 'scatterpolar',\n  mode: 'markers',\n  marker: {\n    color: value,\n    colorscale: \"Portland\",\n    reversescale: true,\n    showscale: true,\n    cmin: 10,\n    cmax: 60\n  },\n\n  hovertemplate: \"Value: %{marker.color}<br>\" +\n                 \"Satellite: %{text}<br>\" +\n                 \"Constellation: \" + constellation[0],\n\n  r: r,\n  theta: theta,\n  text: satellite\n};\n\n\nreturn {\n  data: [trace1]\n};\n",
        "yaml_mode": true
      },
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_POSTGRESQL}"
          },
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "select\r\n  90 - elevation as \"r\",\r\n  azimut as \"theta\",\r\n  sig2noise2 as \"value\",\r\n  'G' || to_char(satellite, 'fm00') as \"satellite\",\r\n  '$constellation' as \"constellation\"\r\nfrom\r\n  skyplot\r\n  inner join station s on s.id = skyplot.station_id\r\n  inner join constellation c on c.id = skyplot.constellation_id\r\n  inner join station_network sn on skyplot.station_id = sn.station_id\r\n  inner join network n on sn.network_id = n.id\r\n  inner join skyplot_date sd on date_id = sd.id\r\nwhere\r\n  s.fullname = '$station'\r\n  and c.fullname = '$constellation'\r\n  and sig2noise2 is not null\r\n  and n.name = '$network'\r\n  and sd.date = '$day';",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "SNR2 (dB-Hz) - $station - $constellation - $day",
      "transformations": [],
      "type": "nline-plotlyjs-panel"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "${DS_POSTGRESQL}"
      },
      "gridPos": {
        "h": 11,
        "w": 8,
        "x": 16,
        "y": 1
      },
      "id": 8,
      "options": {
        "config": {
          "displayModeBar": false
        },
        "data": "",
        "layout": {
          "margin": {
            "b": 40,
            "l": 20,
            "r": 20,
            "t": 5
          },
          "paper_bgcolor": "rgba(0,0,0,0)",
          "plot_bgcolor": "rgba(0,0,0,0)",
          "polar": {
            "angularaxis": {
              "direction": "clockwise",
              "rotation": 90,
              "type": "linear"
            },
            "radialaxis": {
              "angle": 0,
              "autorange": false,
              "range": [
                0,
                90
              ],
              "type": "linear"
            }
          },
          "showlegend": false,
          "xaxis": {
            "autorange": true,
            "range": [
              -1,
              6
            ],
            "showgrid": false,
            "visible": false
          },
          "yaxis": {
            "automargin": true,
            "autorange": true,
            "range": [
              -1,
              4
            ],
            "showgrid": false,
            "visible": false
          }
        },
        "onclick": "// console.log(data);\n// window.updateVariables({query:{'var-project':'test'}, partial: true})",
        "script": "if (data.series[0] == undefined) return {};\n\nlet r =             data.series[0].fields[0].values.buffer;\nlet theta =         data.series[0].fields[1].values.buffer;\nlet value =         data.series[0].fields[2].values.buffer;\nlet satellite =     data.series[0].fields[3].values.buffer;\nlet constellation = data.series[0].fields[4].values.buffer;\n\n// TODO ? une ligne de legende par sat avec une boucle for + du js\nlet trace1 = {\n  name: \"\",\n\n  type: 'scatterpolar',\n  mode: 'markers',\n  marker: {\n    color: value,\n    colorscale: \"Portland\",\n    reversescale: true,\n    showscale: true,\n    cmin: 10,\n    cmax: 60\n  },\n\n  hovertemplate: \"Value: %{marker.color}<br>\" +\n                 \"Satellite: %{text}<br>\" +\n                 \"Constellation: \" + constellation[0],\n\n  r: r,\n  theta: theta,\n  text: satellite\n};\n\n\nreturn {\n  data: [trace1]\n};\n",
        "yaml_mode": true
      },
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_POSTGRESQL}"
          },
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "select\r\n    90 - elevation as \"r\",\r\n    azimut as \"theta\",\r\n    sig2noise5 as \"value\",\r\n    'G' || to_char(satellite, 'fm00') as \"satellite\",\r\n    '$constellation' as \"constellation\"\r\nfrom\r\n    skyplot\r\n    inner join station s on s.id = skyplot.station_id\r\n    inner join constellation c on c.id = skyplot.constellation_id\r\n    inner join station_network sn on skyplot.station_id = sn.station_id\r\n    inner join network n on sn.network_id = n.id\r\n    inner join skyplot_date sd on date_id = sd.id\r\nwhere\r\n    s.fullname = '$station' and\r\n    c.fullname = '$constellation' and\r\n    sig2noise5 is not null and\r\n    n.name = '$network' and\r\n    sd.date = '$day';",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "SNR5 (dB-Hz) - $station - $constellation - $day",
      "transformations": [],
      "type": "nline-plotlyjs-panel"
    },
    {
      "collapsed": false,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 12
      },
      "id": 4,
      "panels": [],
      "title": "Multipath",
      "type": "row"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "${DS_POSTGRESQL}"
      },
      "gridPos": {
        "h": 11,
        "w": 8,
        "x": 0,
        "y": 13
      },
      "id": 1,
      "options": {
        "config": {
          "displayModeBar": false
        },
        "data": "",
        "layout": {
          "margin": {
            "b": 40,
            "l": 20,
            "r": 20,
            "t": 5
          },
          "paper_bgcolor": "rgba(0,0,0,0)",
          "plot_bgcolor": "rgba(0,0,0,0)",
          "polar": {
            "angularaxis": {
              "direction": "clockwise",
              "rotation": 90,
              "type": "linear"
            },
            "radialaxis": {
              "angle": 0,
              "autorange": false,
              "range": [
                0,
                90
              ],
              "type": "linear"
            }
          },
          "showlegend": false,
          "xaxis": {
            "autorange": true,
            "range": [
              -1,
              6
            ],
            "showgrid": false,
            "visible": false
          },
          "yaxis": {
            "automargin": true,
            "autorange": true,
            "range": [
              -1,
              4
            ],
            "showgrid": false,
            "visible": false
          }
        },
        "onclick": "// console.log(data);\n// window.updateVariables({query:{'var-project':'test'}, partial: true})",
        "script": "if (data.series[0] == undefined) return {};\n\nlet r =             data.series[0].fields[0].values.buffer;\nlet theta =         data.series[0].fields[1].values.buffer;\nlet value =         data.series[0].fields[2].values.buffer;\nlet satellite =     data.series[0].fields[3].values.buffer;\nlet constellation = data.series[0].fields[4].values.buffer;\n\n// TODO ? une ligne de legende par sat avec une boucle for + du js\nlet trace1 = {\n  name: \"\",\n\n  type: 'scatterpolar',\n  mode: 'markers',\n  marker: {\n    color: value,\n    colorscale: \"Portland\",\n    showscale: true,\n    cmin: 15,\n    cmax: 150\n  },\n\n  hovertemplate: \"Value: %{marker.color}<br>\" +\n                 \"Satellite: %{text}<br>\" +\n                 \"Constellation: \" + constellation[0],\n\n  r: r,\n  theta: theta,\n  text: satellite\n};\n\n\nreturn {\n  data: [trace1]\n};\n",
        "yaml_mode": true
      },
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_POSTGRESQL}"
          },
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "select\r\n    90 - elevation as \"r\",\r\n    azimut as \"theta\",\r\n    mp1 as \"value\",\r\n    'G' || to_char(satellite, 'fm00') as \"satellite\",\r\n    '$constellation' as \"constellation\"\r\nfrom\r\n    skyplot\r\n    inner join station s on s.id = skyplot.station_id\r\n    inner join constellation c on c.id = skyplot.constellation_id\r\n    inner join station_network sn on skyplot.station_id = sn.station_id\r\n    inner join network n on sn.network_id = n.id\r\n    inner join skyplot_date sd on date_id = sd.id\r\nwhere\r\n    s.fullname = '$station' and\r\n    c.fullname = '$constellation' and\r\n    mp1 is not null and\r\n    n.name = '$network' and\r\n    sd.date = '$day';",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "MP1 (cm) - $station - $constellation - $day",
      "transformations": [],
      "type": "nline-plotlyjs-panel"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "${DS_POSTGRESQL}"
      },
      "gridPos": {
        "h": 11,
        "w": 8,
        "x": 8,
        "y": 13
      },
      "id": 2,
      "options": {
        "config": {
          "displayModeBar": false
        },
        "data": "",
        "layout": {
          "margin": {
            "b": 40,
            "l": 20,
            "r": 20,
            "t": 5
          },
          "paper_bgcolor": "rgba(0,0,0,0)",
          "plot_bgcolor": "rgba(0,0,0,0)",
          "polar": {
            "angularaxis": {
              "direction": "clockwise",
              "rotation": 90,
              "type": "linear"
            },
            "radialaxis": {
              "angle": 0,
              "autorange": false,
              "range": [
                0,
                90
              ],
              "type": "linear"
            }
          },
          "showlegend": false,
          "xaxis": {
            "autorange": true,
            "range": [
              -1,
              6
            ],
            "showgrid": false,
            "visible": false
          },
          "yaxis": {
            "automargin": true,
            "autorange": true,
            "range": [
              -1,
              4
            ],
            "showgrid": false,
            "visible": false
          }
        },
        "onclick": "// console.log(data);\n// window.updateVariables({query:{'var-project':'test'}, partial: true})",
        "script": "if (data.series[0] == undefined) return {};\n\nlet r =             data.series[0].fields[0].values.buffer;\nlet theta =         data.series[0].fields[1].values.buffer;\nlet value =         data.series[0].fields[2].values.buffer;\nlet satellite =     data.series[0].fields[3].values.buffer;\nlet constellation = data.series[0].fields[4].values.buffer;\n\n// TODO ? une ligne de legende par sat avec une boucle for + du js\nlet trace1 = {\n  name: \"\",\n\n  type: 'scatterpolar',\n  mode: 'markers',\n  marker: {\n    color: value,\n    colorscale: \"Portland\",\n    showscale: true,\n    cmin: 15,\n    cmax: 150\n  },\n\n  hovertemplate: \"Value: %{marker.color}<br>\" +\n                 \"Satellite: %{text}<br>\" +\n                 \"Constellation: \" + constellation[0],\n\n  r: r,\n  theta: theta,\n  text: satellite\n};\n\n\nreturn {\n  data: [trace1]\n};\n",
        "yaml_mode": true
      },
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_POSTGRESQL}"
          },
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "select\r\n    90 - elevation as \"r\",\r\n    azimut as \"theta\",\r\n    mp2 as \"value\",\r\n    'G' || to_char(satellite, 'fm00') as \"satellite\",\r\n    '$constellation' as \"constellation\"\r\nfrom\r\n    skyplot\r\n    inner join station s on s.id = skyplot.station_id\r\n    inner join constellation c on c.id = skyplot.constellation_id\r\n    inner join station_network sn on skyplot.station_id = sn.station_id\r\n    inner join network n on sn.network_id = n.id\r\n    inner join skyplot_date sd on date_id = sd.id\r\nwhere\r\n    s.fullname = '$station' and\r\n    c.fullname = '$constellation' and\r\n    mp2 is not null and\r\n    n.name = '$network' and\r\n    sd.date = '$day';",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "MP2 (cm) - $station - $constellation - $day",
      "transformations": [],
      "type": "nline-plotlyjs-panel"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "${DS_POSTGRESQL}"
      },
      "gridPos": {
        "h": 11,
        "w": 8,
        "x": 16,
        "y": 13
      },
      "id": 3,
      "options": {
        "config": {
          "displayModeBar": false
        },
        "data": "",
        "layout": {
          "margin": {
            "b": 40,
            "l": 20,
            "r": 20,
            "t": 5
          },
          "paper_bgcolor": "rgba(0,0,0,0)",
          "plot_bgcolor": "rgba(0,0,0,0)",
          "polar": {
            "angularaxis": {
              "direction": "clockwise",
              "rotation": 90,
              "type": "linear"
            },
            "radialaxis": {
              "angle": 0,
              "autorange": false,
              "range": [
                0,
                90
              ],
              "type": "linear"
            }
          },
          "showlegend": false,
          "xaxis": {
            "autorange": true,
            "range": [
              -1,
              6
            ],
            "showgrid": false,
            "visible": false
          },
          "yaxis": {
            "automargin": true,
            "autorange": true,
            "range": [
              -1,
              4
            ],
            "showgrid": false,
            "visible": false
          }
        },
        "onclick": "// console.log(data);\n// window.updateVariables({query:{'var-project':'test'}, partial: true})",
        "script": "if (data.series[0] == undefined) return {};\n\nlet r =             data.series[0].fields[0].values.buffer;\nlet theta =         data.series[0].fields[1].values.buffer;\nlet value =         data.series[0].fields[2].values.buffer;\nlet satellite =     data.series[0].fields[3].values.buffer;\nlet constellation = data.series[0].fields[4].values.buffer;\n\n// TODO ? une ligne de legende par sat avec une boucle for + du js\nlet trace1 = {\n  name: \"\",\n\n  type: 'scatterpolar',\n  mode: 'markers',\n  marker: {\n    color: value,\n    colorscale: \"Portland\",\n    showscale: true,\n    cmin: 15,\n    cmax: 150\n  },\n\n  hovertemplate: \"Value: %{marker.color}<br>\" +\n                 \"Satellite: %{text}<br>\" +\n                 \"Constellation: \" + constellation[0],\n\n  r: r,\n  theta: theta,\n  text: satellite\n};\n\n\nreturn {\n  data: [trace1]\n};\n",
        "yaml_mode": true
      },
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_POSTGRESQL}"
          },
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "select\r\n    90 - elevation as \"r\",\r\n    azimut as \"theta\",\r\n    mp5 as \"value\",\r\n    'G' || to_char(satellite, 'fm00') as \"satellite\",\r\n    '$constellation' as \"constellation\"\r\nfrom\r\n    skyplot\r\n    inner join station s on s.id = skyplot.station_id\r\n    inner join constellation c on c.id = skyplot.constellation_id\r\n    inner join station_network sn on skyplot.station_id = sn.station_id\r\n    inner join network n on sn.network_id = n.id\r\n    inner join skyplot_date sd on date_id = sd.id\r\nwhere\r\n    s.fullname = '$station' and\r\n    c.fullname = '$constellation' and\r\n    mp5 is not null and\r\n    n.name = '$network' and\r\n    sd.date = '$day';",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "MP5 (cm) - $station - $constellation - $day",
      "transformations": [],
      "type": "nline-plotlyjs-panel"
    },
    {
      "collapsed": false,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 24
      },
      "id": 13,
      "panels": [],
      "title": "Cycle slip",
      "type": "row"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "${DS_POSTGRESQL}"
      },
      "gridPos": {
        "h": 11,
        "w": 8,
        "x": 0,
        "y": 25
      },
      "id": 14,
      "options": {
        "config": {
          "displayModeBar": false
        },
        "data": "",
        "layout": {
          "margin": {
            "b": 40,
            "l": 20,
            "r": 20,
            "t": 5
          },
          "paper_bgcolor": "rgba(0,0,0,0)",
          "plot_bgcolor": "rgba(0,0,0,0)",
          "polar": {
            "angularaxis": {
              "direction": "clockwise",
              "rotation": 90,
              "type": "linear"
            },
            "radialaxis": {
              "angle": 0,
              "autorange": false,
              "range": [
                0,
                90
              ],
              "type": "linear"
            }
          },
          "showlegend": false,
          "xaxis": {
            "autorange": true,
            "range": [
              -1,
              6
            ],
            "showgrid": false,
            "visible": false
          },
          "yaxis": {
            "automargin": true,
            "autorange": true,
            "range": [
              -1,
              4
            ],
            "showgrid": false,
            "visible": false
          }
        },
        "onclick": "// console.log(data);\n// window.updateVariables({query:{'var-project':'test'}, partial: true})",
        "script": "if (data.series[0] == undefined) return {};\n\nlet r =             data.series[0].fields[0].values.buffer;\nlet theta =         data.series[0].fields[1].values.buffer;\nlet satellite =     data.series[0].fields[2].values.buffer;\nlet constellation = data.series[0].fields[3].values.buffer;\n\n// TODO ? une ligne de legende par sat avec une boucle for + du js\nlet trace1 = {\n  name: \"\",\n\n  type: 'scatterpolar',\n  mode: 'markers',\n  marker: {\n    color: \"red\"\n  },\n\n  hovertemplate: \"Satellite: %{text}<br>\" +\n                 \"Constellation: \" + constellation[0],\n\n  r: r,\n  theta: theta,\n  text: satellite\n};\n\n\nreturn {\n  data: [trace1]\n};\n",
        "yaml_mode": true
      },
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_POSTGRESQL}"
          },
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "select\r\n    90 - elevation as \"r\",\r\n    azimut as \"theta\",\r\n    'G' || to_char(satellite, 'fm00') as \"satellite\",\r\n    '$constellation' as \"constellation\"\r\nfrom\r\n    skyplot\r\n    inner join station s on s.id = skyplot.station_id\r\n    inner join constellation c on c.id = skyplot.constellation_id\r\n    inner join station_network sn on skyplot.station_id = sn.station_id\r\n    inner join network n on sn.network_id = n.id\r\n    inner join skyplot_date sd on date_id = sd.id\r\nwhere\r\n    cs1 and\r\n    s.fullname = '$station' and\r\n    c.fullname = '$constellation' and\r\n    n.name = '$network' and\r\n    sd.date = '$day';",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "CS1 - $station - $constellation - $day",
      "transformations": [],
      "type": "nline-plotlyjs-panel"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "${DS_POSTGRESQL}"
      },
      "gridPos": {
        "h": 11,
        "w": 8,
        "x": 8,
        "y": 25
      },
      "id": 15,
      "options": {
        "config": {
          "displayModeBar": false
        },
        "data": "",
        "layout": {
          "margin": {
            "b": 40,
            "l": 20,
            "r": 20,
            "t": 5
          },
          "paper_bgcolor": "rgba(0,0,0,0)",
          "plot_bgcolor": "rgba(0,0,0,0)",
          "polar": {
            "angularaxis": {
              "direction": "clockwise",
              "rotation": 90,
              "type": "linear"
            },
            "radialaxis": {
              "angle": 0,
              "autorange": false,
              "range": [
                0,
                90
              ],
              "type": "linear"
            }
          },
          "showlegend": false,
          "xaxis": {
            "autorange": true,
            "range": [
              -1,
              6
            ],
            "showgrid": false,
            "visible": false
          },
          "yaxis": {
            "automargin": true,
            "autorange": true,
            "range": [
              -1,
              4
            ],
            "showgrid": false,
            "visible": false
          }
        },
        "onclick": "// console.log(data);\n// window.updateVariables({query:{'var-project':'test'}, partial: true})",
        "script": "if (data.series[0] == undefined) return {};\n\nlet r =     data.series[0].fields[0].values.buffer;\nlet theta = data.series[0].fields[1].values.buffer;\nlet satellite =     data.series[0].fields[2].values.buffer;\nlet constellation = data.series[0].fields[3].values.buffer;\n\n// TODO ? une ligne de legende par sat avec une boucle for + du js\nlet trace1 = {\n  name: \"\",\n\n  type: 'scatterpolar',\n  mode: 'markers',\n  marker: {\n    color: \"red\"\n  },\n\n  hovertemplate: \"Satellite: %{text}<br>\" +\n                 \"Constellation: \" + constellation[0],\n\n  r: r,\n  theta: theta,\n  text: satellite\n};\n\n\nreturn {\n  data: [trace1]\n};\n",
        "yaml_mode": true
      },
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_POSTGRESQL}"
          },
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "select\r\n    90 - elevation as \"r\",\r\n    azimut as \"theta\",\r\n    'G' || to_char(satellite, 'fm00') as \"satellite\",\r\n    '$constellation' as \"constellation\"\r\nfrom\r\n    skyplot\r\n    inner join station s on s.id = skyplot.station_id\r\n    inner join constellation c on c.id = skyplot.constellation_id\r\n    inner join station_network sn on skyplot.station_id = sn.station_id\r\n    inner join network n on sn.network_id = n.id\r\n    inner join skyplot_date sd on date_id = sd.id\r\nwhere\r\n    cs2 and\r\n    s.fullname = '$station' and\r\n    c.fullname = '$constellation' and\r\n    n.name = '$network' and\r\n    sd.date = '$day';",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "CS2 - $station - $constellation - $day",
      "transformations": [],
      "type": "nline-plotlyjs-panel"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "${DS_POSTGRESQL}"
      },
      "gridPos": {
        "h": 11,
        "w": 8,
        "x": 16,
        "y": 25
      },
      "id": 16,
      "options": {
        "config": {
          "displayModeBar": false
        },
        "data": "",
        "layout": {
          "margin": {
            "b": 40,
            "l": 20,
            "r": 20,
            "t": 5
          },
          "paper_bgcolor": "rgba(0,0,0,0)",
          "plot_bgcolor": "rgba(0,0,0,0)",
          "polar": {
            "angularaxis": {
              "direction": "clockwise",
              "rotation": 90,
              "type": "linear"
            },
            "radialaxis": {
              "angle": 0,
              "autorange": false,
              "range": [
                0,
                90
              ],
              "type": "linear"
            }
          },
          "showlegend": false,
          "xaxis": {
            "autorange": true,
            "range": [
              -1,
              6
            ],
            "showgrid": false,
            "visible": false
          },
          "yaxis": {
            "automargin": true,
            "autorange": true,
            "range": [
              -1,
              4
            ],
            "showgrid": false,
            "visible": false
          }
        },
        "onclick": "// console.log(data);\n// window.updateVariables({query:{'var-project':'test'}, partial: true})",
        "script": "if (data.series[0] == undefined) return {};\n\nlet r =     data.series[0].fields[0].values.buffer;\nlet theta = data.series[0].fields[1].values.buffer;\nlet satellite =     data.series[0].fields[2].values.buffer;\nlet constellation = data.series[0].fields[3].values.buffer;\n\n// TODO ? une ligne de legende par sat avec une boucle for + du js\nlet trace1 = {\n  name: \"\",\n\n  type: 'scatterpolar',\n  mode: 'markers',\n  marker: {\n    color: \"red\"\n  },\n\n  hovertemplate: \"Satellite: %{text}<br>\" +\n                 \"Constellation: \" + constellation[0],\n\n  r: r,\n  theta: theta,\n  text: satellite\n};\n\n\nreturn {\n  data: [trace1]\n};\n",
        "yaml_mode": true
      },
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_POSTGRESQL}"
          },
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "select\r\n  90 - elevation as \"r\",\r\n  azimut as \"theta\",\r\n  'G' || to_char(satellite, 'fm00') as \"satellite\",\r\n  '$constellation' as \"constellation\"\r\nfrom\r\n  skyplot\r\n  inner join station s on s.id = skyplot.station_id\r\n  inner join constellation c on c.id = skyplot.constellation_id\r\n  inner join station_network sn on skyplot.station_id = sn.station_id\r\n  inner join network n on sn.network_id = n.id\r\n  inner join skyplot_date sd on date_id = sd.id\r\nwhere\r\n  cs5\r\n  and s.fullname = '$station'\r\n  and c.fullname = '$constellation'\r\n  and n.name = '$network'\r\n  and sd.date = '$day';",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "CS5 - $station - $constellation - $day",
      "transformations": [],
      "type": "nline-plotlyjs-panel"
    },
    {
      "collapsed": false,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 36
      },
      "id": 9,
      "panels": [],
      "title": "Sources and explanations",
      "type": "row"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "${DS_POSTGRESQL}"
      },
      "gridPos": {
        "h": 7,
        "w": 13,
        "x": 0,
        "y": 37
      },
      "id": 11,
      "options": {
        "content": "# Graph sources\n\n- Graphs are generated from the data quality metrics xtr files available at: \n[https://renag.resif.fr/pub/quality-check/full/{{year}}/{{number}}/{{fullname}}-{{day}}.xtr](https://renag.resif.fr/pub/quality-check/full/{{year}}/{{number}}/{{fullname}}-{{day}}.xtr)\n- The data quality metrics have been computed at the [RESIF-RENAG](http://doi.org/10.17616/R31NJN5L) data center using the [G-Nut/Anubis](https://gnutsoftware.com/software/anubis/) software\n- Input files are the daily RINEX 3 observation files available from:\n[https://renag.resif.fr/pub/rinex3/{{year}}/{{number}}/{{fullname}}_R_{{year}}{{number}}0000_01D_30S_MO.crx.gz](https://renag.resif.fr/pub/rinex3/{{year}}/{{number}}/{{fullname}}_R_{{year}}{{number}}0000_01D_30S_MO.crx.gz)\n",
        "defaultContent": "The query didn't return any results.",
        "editor": {
          "format": "auto",
          "height": 258,
          "language": "markdown"
        },
        "editors": [
          "styles"
        ],
        "everyRow": true,
        "helpers": "",
        "styles": "a {\r\n  color: #6e9fff\r\n}\r\n\r\na:hover {\r\n  text-decoration: underline;\r\n}\r\n"
      },
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_POSTGRESQL}"
          },
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "select\r\n    s.fullname,\r\n    split_part('$day', '-', 1) as year,\r\n    to_char('$day'::date - date_trunc('year', '$day'::date)::date + 1, 'fm000') as number,\r\n    '$day' as day\r\nfrom station s\r\n  inner join station_network sn on sn.station_id = s.id\r\n  inner join network n on n.id = sn.network_id\r\nwhere fullname = '$station'\r\nlimit 1;",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "Graph sources",
      "type": "marcusolsson-dynamictext-panel"
    },
    {
      "gridPos": {
        "h": 13,
        "w": 11,
        "x": 13,
        "y": 37
      },
      "id": 10,
      "options": {
        "code": {
          "language": "plaintext",
          "showLineNumbers": false,
          "showMiniMap": false
        },
        "content": "# Explanations\n\n## Skyplot view\n\nSky plots show satellite locations in elevation and azimuth from the antenna location.  \nThe metrics and positions are computed every 15 minutes.\n\n## Carrier-phase signal-to-noise ratio (dB-Hz)\n\nSignal strength of the modulated signal.\n\n## Pseudo-range multipath (cm)\n\nElongation of the signal arriving indirectly at the GNSS antenna.\n\n## Satellite cycle slips (%)\n\nRed dots shows satellite tracking interruption occurences.  \nEmpty view mean no cycle slip detected, or signal band not tracked.\n",
        "mode": "markdown"
      },
      "pluginVersion": "9.5.2",
      "title": "Explanations",
      "type": "text"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "${DS_POSTGRESQL}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "auto",
            "cellOptions": {
              "type": "auto"
            },
            "inspect": false
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 6,
        "w": 13,
        "x": 0,
        "y": 44
      },
      "id": 12,
      "options": {
        "cellHeight": "sm",
        "footer": {
          "countRows": false,
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": true
      },
      "pluginVersion": "9.5.2",
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_POSTGRESQL}"
          },
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "select\r\n  c.fullname as \"Constellation\",\r\n  ot1.type as \"MP1\",\r\n  ot2.type as \"MP2\",\r\n  ot5.type as \"MP5\",\r\n  snr1.type as \"SNR1\",\r\n  snr2.type as \"SNR2\",\r\n  snr5.type as \"SNR5\"\r\nfrom\r\n  skyplot_used_band b\r\n  inner join skyplot_date sd on b.date_id = sd.id\r\n  inner join station s on b.station_id = s.id\r\n  inner join station_network sn on sn.station_id = s.id\r\n  inner join network n on n.id = sn.network_id\r\n  inner join constellation c on c.id = b.constellation_id\r\n  inner join observation_type ot1 on b.mp1_observation_type_id = ot1.id\r\n  inner join observation_type ot2 on ot2.id = b.mp2_observation_type_id\r\n  inner join observation_type ot5 on ot5.id = b.mp5_observation_type_id\r\n  inner join observation_type snr1 on snr1.id = b.sig2noise1_observation_type_id\r\n  inner join observation_type snr2 on snr2.id = b.sig2noise2_observation_type_id\r\n  inner join observation_type snr5 on snr5.id = b.sig2noise5_observation_type_id\r\nwhere\r\n  sd.date = '$day'\r\n  and s.fullname = '$station';",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "Used observables",
      "type": "table"
    }
  ],
  "refresh": "",
  "schemaVersion": 38,
  "style": "dark",
  "tags": [],
  "templating": {
    "list": [
      {
        "hide": 2,
        "label": "",
        "name": "network",
        "query": "${VAR_NETWORK}",
        "skipUrlSync": false,
        "type": "constant",
        "current": {
          "value": "${VAR_NETWORK}",
          "text": "${VAR_NETWORK}",
          "selected": false
        },
        "options": [
          {
            "value": "${VAR_NETWORK}",
            "text": "${VAR_NETWORK}",
            "selected": false
          }
        ]
      },
      {
        "current": {},
        "datasource": {
          "type": "postgres",
          "uid": "${DS_POSTGRESQL}"
        },
        "definition": "select s.fullname\nfrom station s\ninner join station_network sn on s.id = sn.station_id\ninner join network n on n.id = sn.network_id\nwhere n.name = '$network';",
        "hide": 0,
        "includeAll": false,
        "label": "Select station",
        "multi": false,
        "name": "station",
        "options": [],
        "query": "select s.fullname\nfrom station s\ninner join station_network sn on s.id = sn.station_id\ninner join network n on n.id = sn.network_id\nwhere n.name = '$network';",
        "refresh": 2,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      },
      {
        "current": {},
        "datasource": {
          "type": "postgres",
          "uid": "${DS_POSTGRESQL}"
        },
        "definition": "select fullname\nfrom constellation\n\norder by fullname;",
        "description": "",
        "hide": 0,
        "includeAll": false,
        "label": "Select constellation(s)",
        "multi": false,
        "name": "constellation",
        "options": [],
        "query": "select fullname\nfrom constellation\n\norder by fullname;",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      },
      {
        "current": {},
        "datasource": {
          "type": "postgres",
          "uid": "${DS_POSTGRESQL}"
        },
        "definition": "select date::text\nfrom skyplot_date\nwhere $__timeFilter(\"date\")\norder by date;",
        "hide": 0,
        "includeAll": false,
        "label": "Select day",
        "multi": false,
        "name": "day",
        "options": [],
        "query": "select date::text\nfrom skyplot_date\nwhere $__timeFilter(\"date\")\norder by date;",
        "refresh": 2,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      }
    ]
  },
  "time": {
    "from": "now/y",
    "to": "now"
  },
  "timepicker": {
    "hidden": false,
    "refresh_intervals": [
      "1d"
    ]
  },
  "timezone": "",
  "title": "Skyplots",
  "uid": "d142a90b-c21f-4706-8284-3fb57a442aa3",
  "version": 135,
  "weekStart": ""
}